{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Blockwise Ensemble Methods\n",
    "\n",
    "Dask-ML provides some [ensemble methods](https://ml.dask.org/modules/api.html#module-dask_ml.ensemble) that are tailored to `dask.array`'s and `dask.dataframe`'s blocked structure. The basic idea is to fit a copy of some sub-estimator to each block (or partition) of the dask Array or DataFrame. Becuase each block fits in memory, the sub-estimator only needs to handle in-memory data structures like a NumPy array or pandas DataFrame. It also will be relatively fast, since each block fits in memory and we won't need to move large amounts of data between workers on a cluster. We end up with an ensemble of models: one per block in the training dataset.\n",
    "\n",
    "At prediction time, we combine the results from all the models in the ensemble. For regression problems, this means averaging the predictions from each sub-estimator. For classification problems, each sub-estimator votes and the results are combined. See https://scikit-learn.org/stable/modules/ensemble.html#voting-classifier for details on how they can be combeind. See https://scikit-learn.org/stable/modules/ensemble.html for a general overview of why averaging ensemble methods can be useful.\n",
    "\n",
    "It's crucially important that the distribution of values in your dataset be relatively uniform across partitions. Otherwise the parameters learned on any given partition of the data will be poor for the dataset as a whole. This will be shown in detail later."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's randomly generate an example dataset. In practice, you would load the data from storage. We'll create a `dask.array` with 10 blocks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:13.680661Z",
     "iopub.status.busy": "2022-06-06T20:41:13.680273Z",
     "iopub.status.idle": "2022-06-06T20:41:17.464277Z",
     "shell.execute_reply": "2022-06-06T20:41:17.463580Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda3/envs/dask-examples/lib/python3.9/site-packages/dask/base.py:1283: UserWarning: Running on a single-machine scheduler when a distributed client is active might lead to unexpected results.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <td>\n",
       "            <table>\n",
       "                <thead>\n",
       "                    <tr>\n",
       "                        <td> </td>\n",
       "                        <th> Array </th>\n",
       "                        <th> Chunk </th>\n",
       "                    </tr>\n",
       "                </thead>\n",
       "                <tbody>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Bytes </th>\n",
       "                        <td> 152.59 MiB </td>\n",
       "                        <td> 15.26 MiB </td>\n",
       "                    </tr>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Shape </th>\n",
       "                        <td> (1000000, 20) </td>\n",
       "                        <td> (100000, 20) </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Count </th>\n",
       "                        <td> 10 Tasks </td>\n",
       "                        <td> 10 Chunks </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                    <th> Type </th>\n",
       "                    <td> float64 </td>\n",
       "                    <td> numpy.ndarray </td>\n",
       "                    </tr>\n",
       "                </tbody>\n",
       "            </table>\n",
       "        </td>\n",
       "        <td>\n",
       "        <svg width=\"75\" height=\"170\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"25\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"24\" x2=\"25\" y2=\"24\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"25\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"48\" x2=\"25\" y2=\"48\" />\n",
       "  <line x1=\"0\" y1=\"60\" x2=\"25\" y2=\"60\" />\n",
       "  <line x1=\"0\" y1=\"72\" x2=\"25\" y2=\"72\" />\n",
       "  <line x1=\"0\" y1=\"84\" x2=\"25\" y2=\"84\" />\n",
       "  <line x1=\"0\" y1=\"96\" x2=\"25\" y2=\"96\" />\n",
       "  <line x1=\"0\" y1=\"108\" x2=\"25\" y2=\"108\" />\n",
       "  <line x1=\"0\" y1=\"120\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"25\" y1=\"0\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.0,0.0 25.412616514582485,0.0 25.412616514582485,120.0 0.0,120.0\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"12.706308\" y=\"140.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >20</text>\n",
       "  <text x=\"45.412617\" y=\"60.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,45.412617,60.000000)\">1000000</text>\n",
       "</svg>\n",
       "        </td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<normal, shape=(1000000, 20), dtype=float64, chunksize=(100000, 20), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from distributed import Client\n",
    "import dask_ml.datasets\n",
    "import dask_ml.ensemble\n",
    "\n",
    "client = Client(n_workers=4, threads_per_worker=1)\n",
    "\n",
    "X, y = dask_ml.datasets.make_classification(n_samples=1_000_000,\n",
    "                                            n_informative=10,\n",
    "                                            shift=2, scale=2,\n",
    "                                            chunks=100_000)\n",
    "X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classification\n",
    "\n",
    "The `sub-estimator` should be an instantiated scikit-learn-API compatible estimator (anything that implements the `fit` / `predict` API, including pipelines). It only needs to handle in-memory datasets. We'll use `sklearn.linear_model.RidgeClassifier`.\n",
    "\n",
    "To get the output shapes right, we require that you provide the `classes` for classification problems, either when creating the estimator or in `.fit` if the sub-estimator also requires the classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:17.467585Z",
     "iopub.status.busy": "2022-06-06T20:41:17.467144Z",
     "iopub.status.idle": "2022-06-06T20:41:17.474900Z",
     "shell.execute_reply": "2022-06-06T20:41:17.474361Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BlockwiseVotingClassifier(classes=[0, 1],\n",
       "                          estimator=RidgeClassifier(random_state=0))"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sklearn.linear_model\n",
    "\n",
    "subestimator = sklearn.linear_model.RidgeClassifier(random_state=0)\n",
    "clf = dask_ml.ensemble.BlockwiseVotingClassifier(\n",
    "    subestimator,\n",
    "    classes=[0, 1]\n",
    ")\n",
    "clf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can train normally. This will *independently* fit a clone of `subestimator` on each partition of `X` and `y`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:17.477835Z",
     "iopub.status.busy": "2022-06-06T20:41:17.477446Z",
     "iopub.status.idle": "2022-06-06T20:41:20.998879Z",
     "shell.execute_reply": "2022-06-06T20:41:20.998313Z"
    }
   },
   "outputs": [],
   "source": [
    "clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All of the fitted estimators are available at `.estimators_`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:21.003728Z",
     "iopub.status.busy": "2022-06-06T20:41:21.002706Z",
     "iopub.status.idle": "2022-06-06T20:41:21.011776Z",
     "shell.execute_reply": "2022-06-06T20:41:21.011252Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0)]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.estimators_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These are different estimators! They've been trained on separate batches of data and have learned different parameters. We can plot the difference in the learned `coef_` of the first two models to visualize this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:21.015121Z",
     "iopub.status.busy": "2022-06-06T20:41:21.014877Z",
     "iopub.status.idle": "2022-06-06T20:41:21.697524Z",
     "shell.execute_reply": "2022-06-06T20:41:21.696841Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:21.700978Z",
     "iopub.status.busy": "2022-06-06T20:41:21.700573Z",
     "iopub.status.idle": "2022-06-06T20:41:21.849499Z",
     "shell.execute_reply": "2022-06-06T20:41:21.848532Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "a = clf.estimators_[0].coef_\n",
    "b = clf.estimators_[1].coef_\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.bar(np.arange(a.shape[1]), (a - b).ravel())\n",
    "ax.set(xticks=[], xlabel=\"Feature\", title=\"Difference in Learned Coefficients\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That said, the assumption backing this entire process is that the distribution of the data is relatively uniform across partitions. The parameters learned by the each member of the ensemble should be relatively similar, and so will give relatively similar predictions when applied to the same data.\n",
    "\n",
    "When you `predict`, the result will have the same chunking pattern as the input array you're predicting for (which need not match the partitioning of the training data)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:21.854503Z",
     "iopub.status.busy": "2022-06-06T20:41:21.853291Z",
     "iopub.status.idle": "2022-06-06T20:41:21.891342Z",
     "shell.execute_reply": "2022-06-06T20:41:21.890741Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <td>\n",
       "            <table>\n",
       "                <thead>\n",
       "                    <tr>\n",
       "                        <td> </td>\n",
       "                        <th> Array </th>\n",
       "                        <th> Chunk </th>\n",
       "                    </tr>\n",
       "                </thead>\n",
       "                <tbody>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Bytes </th>\n",
       "                        <td> 7.63 MiB </td>\n",
       "                        <td> 781.25 kiB </td>\n",
       "                    </tr>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Shape </th>\n",
       "                        <td> (1000000,) </td>\n",
       "                        <td> (100000,) </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Count </th>\n",
       "                        <td> 31 Tasks </td>\n",
       "                        <td> 10 Chunks </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                    <th> Type </th>\n",
       "                    <td> int64 </td>\n",
       "                    <td> numpy.ndarray </td>\n",
       "                    </tr>\n",
       "                </tbody>\n",
       "            </table>\n",
       "        </td>\n",
       "        <td>\n",
       "        <svg width=\"170\" height=\"75\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"120\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"25\" x2=\"120\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"12\" y1=\"0\" x2=\"12\" y2=\"25\" />\n",
       "  <line x1=\"24\" y1=\"0\" x2=\"24\" y2=\"25\" />\n",
       "  <line x1=\"36\" y1=\"0\" x2=\"36\" y2=\"25\" />\n",
       "  <line x1=\"48\" y1=\"0\" x2=\"48\" y2=\"25\" />\n",
       "  <line x1=\"60\" y1=\"0\" x2=\"60\" y2=\"25\" />\n",
       "  <line x1=\"72\" y1=\"0\" x2=\"72\" y2=\"25\" />\n",
       "  <line x1=\"84\" y1=\"0\" x2=\"84\" y2=\"25\" />\n",
       "  <line x1=\"96\" y1=\"0\" x2=\"96\" y2=\"25\" />\n",
       "  <line x1=\"108\" y1=\"0\" x2=\"108\" y2=\"25\" />\n",
       "  <line x1=\"120\" y1=\"0\" x2=\"120\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.0,0.0 120.0,0.0 120.0,25.412616514582485 0.0,25.412616514582485\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"60.000000\" y=\"45.412617\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >1000000</text>\n",
       "  <text x=\"140.000000\" y=\"12.706308\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(0,140.000000,12.706308)\">1</text>\n",
       "</svg>\n",
       "        </td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<_vote_block, shape=(1000000,), dtype=int64, chunksize=(100000,), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds = clf.predict(X)\n",
    "preds"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This generates a set of tasks that\n",
    "\n",
    "1. Calls `subestimator.predict(chunk)` for each subestimator (10 in our case)\n",
    "2. Concatenates those predictions together\n",
    "3. Somehow averages the predictions to a single overall prediction\n",
    "\n",
    "We used the default `voting=\"hard\"` strategy, which means we just choose the class that had the higest number of votes. If the first two sub-estimators picked class `0` and the other eight picked class `1` for the first row, the final prediction for that row will be class `1`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:21.894276Z",
     "iopub.status.busy": "2022-06-06T20:41:21.893870Z",
     "iopub.status.idle": "2022-06-06T20:41:22.615903Z",
     "shell.execute_reply": "2022-06-06T20:41:22.614856Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 1, 0, 0, 1, 0, 0, 0, 0, 0])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds[:10].compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With `voting=\"soft\"` we have access to `predict_proba`, as long as the subestimator has a `predict_proba` method. These subestimators should be well-calibrated for the predictions to be meaningful. See [probability calibration](https://scikit-learn.org/stable/modules/calibration.html#calibration) for more."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:22.619151Z",
     "iopub.status.busy": "2022-06-06T20:41:22.618730Z",
     "iopub.status.idle": "2022-06-06T20:41:25.479827Z",
     "shell.execute_reply": "2022-06-06T20:41:25.478385Z"
    }
   },
   "outputs": [],
   "source": [
    "subestimator = sklearn.linear_model.LogisticRegression(random_state=0)\n",
    "clf = dask_ml.ensemble.BlockwiseVotingClassifier(\n",
    "    subestimator,\n",
    "    classes=[0, 1],\n",
    "    voting=\"soft\"\n",
    ")\n",
    "clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:25.483732Z",
     "iopub.status.busy": "2022-06-06T20:41:25.483090Z",
     "iopub.status.idle": "2022-06-06T20:41:25.771239Z",
     "shell.execute_reply": "2022-06-06T20:41:25.770747Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.32164728, 0.67835272],\n",
       "       [0.21211854, 0.78788146],\n",
       "       [0.91066017, 0.08933983],\n",
       "       [0.65510052, 0.34489948],\n",
       "       [0.02578608, 0.97421392]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "proba = clf.predict_proba(X)\n",
    "proba[:5].compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The stages here are similar to the `voting=\"hard\"` case. Only now instead of taking the majority vote we average the probabilities predicted by each sub-estimator."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regression\n",
    "\n",
    "Regression is quite similar. The primary difference is that there's no voting; predictions from estimators are always reduced by averaging."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:25.774370Z",
     "iopub.status.busy": "2022-06-06T20:41:25.773806Z",
     "iopub.status.idle": "2022-06-06T20:41:25.919999Z",
     "shell.execute_reply": "2022-06-06T20:41:25.919588Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <td>\n",
       "            <table>\n",
       "                <thead>\n",
       "                    <tr>\n",
       "                        <td> </td>\n",
       "                        <th> Array </th>\n",
       "                        <th> Chunk </th>\n",
       "                    </tr>\n",
       "                </thead>\n",
       "                <tbody>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Bytes </th>\n",
       "                        <td> 152.59 MiB </td>\n",
       "                        <td> 15.26 MiB </td>\n",
       "                    </tr>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Shape </th>\n",
       "                        <td> (1000000, 20) </td>\n",
       "                        <td> (100000, 20) </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Count </th>\n",
       "                        <td> 10 Tasks </td>\n",
       "                        <td> 10 Chunks </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                    <th> Type </th>\n",
       "                    <td> float64 </td>\n",
       "                    <td> numpy.ndarray </td>\n",
       "                    </tr>\n",
       "                </tbody>\n",
       "            </table>\n",
       "        </td>\n",
       "        <td>\n",
       "        <svg width=\"75\" height=\"170\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"25\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"24\" x2=\"25\" y2=\"24\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"25\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"48\" x2=\"25\" y2=\"48\" />\n",
       "  <line x1=\"0\" y1=\"60\" x2=\"25\" y2=\"60\" />\n",
       "  <line x1=\"0\" y1=\"72\" x2=\"25\" y2=\"72\" />\n",
       "  <line x1=\"0\" y1=\"84\" x2=\"25\" y2=\"84\" />\n",
       "  <line x1=\"0\" y1=\"96\" x2=\"25\" y2=\"96\" />\n",
       "  <line x1=\"0\" y1=\"108\" x2=\"25\" y2=\"108\" />\n",
       "  <line x1=\"0\" y1=\"120\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"25\" y1=\"0\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.0,0.0 25.412616514582485,0.0 25.412616514582485,120.0 0.0,120.0\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"12.706308\" y=\"140.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >20</text>\n",
       "  <text x=\"45.412617\" y=\"60.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,45.412617,60.000000)\">1000000</text>\n",
       "</svg>\n",
       "        </td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<normal, shape=(1000000, 20), dtype=float64, chunksize=(100000, 20), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X, y = dask_ml.datasets.make_regression(n_samples=1_000_000,\n",
    "                                        chunks=100_000,\n",
    "                                        n_features=20)\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:25.924394Z",
     "iopub.status.busy": "2022-06-06T20:41:25.922988Z",
     "iopub.status.idle": "2022-06-06T20:41:27.626579Z",
     "shell.execute_reply": "2022-06-06T20:41:27.626107Z"
    }
   },
   "outputs": [],
   "source": [
    "subestimator = sklearn.linear_model.LinearRegression()\n",
    "clf = dask_ml.ensemble.BlockwiseVotingRegressor(\n",
    "    subestimator,\n",
    ")\n",
    "clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:27.630860Z",
     "iopub.status.busy": "2022-06-06T20:41:27.629543Z",
     "iopub.status.idle": "2022-06-06T20:41:27.888537Z",
     "shell.execute_reply": "2022-06-06T20:41:27.888097Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ -37.60595115,  242.7661385 ,   95.09393766, -111.74356428,\n",
       "        -60.84822099])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.predict(X)[:5].compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As usual with Dask-ML, scoring is done in parallel (and distributed on a cluster if you're connected to one)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:27.892119Z",
     "iopub.status.busy": "2022-06-06T20:41:27.890987Z",
     "iopub.status.idle": "2022-06-06T20:41:29.550126Z",
     "shell.execute_reply": "2022-06-06T20:41:29.549492Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The dangers of non-uniformly distributed data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, it must be re-emphasized that your data should be uniformly distributed across partitoins prior to using these ensemble methods. If it's not, then you're better off just sampling rows from each partition and fitting a single classifer to it. By \"uniform\" we don't mean \"from a uniform probabillity distribution\". Just that there shouldn't be a clear per-partition pattern to how the data is distributed.\n",
    "\n",
    "Let's demonstrate that with an example. We'll generate a dataset with a clear trend across partitions. This might represent some non-stationary time-series, though it can occur in other contexts as well (e.g. on data partitioned by geography, age, etc.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:29.554278Z",
     "iopub.status.busy": "2022-06-06T20:41:29.552868Z",
     "iopub.status.idle": "2022-06-06T20:41:29.558167Z",
     "shell.execute_reply": "2022-06-06T20:41:29.557685Z"
    }
   },
   "outputs": [],
   "source": [
    "import dask.array as da\n",
    "import dask.delayed\n",
    "import sklearn.datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:29.561555Z",
     "iopub.status.busy": "2022-06-06T20:41:29.560936Z",
     "iopub.status.idle": "2022-06-06T20:41:29.569271Z",
     "shell.execute_reply": "2022-06-06T20:41:29.568759Z"
    }
   },
   "outputs": [],
   "source": [
    "def clone_and_shift(X, y, i):\n",
    "    X = X.copy()\n",
    "    X += i + np.random.random(X.shape)\n",
    "    y += 25 * (i + np.random.random(y.shape))\n",
    "    return X, y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:29.573791Z",
     "iopub.status.busy": "2022-06-06T20:41:29.572406Z",
     "iopub.status.idle": "2022-06-06T20:41:29.586364Z",
     "shell.execute_reply": "2022-06-06T20:41:29.585924Z"
    }
   },
   "outputs": [],
   "source": [
    "# Make a base dataset that we'll clone and shift\n",
    "X, y = sklearn.datasets.make_regression(n_features=4, bias=2, random_state=0)\n",
    "\n",
    "# Clone and shift 10 times, gradually increasing X and y for each partition\n",
    "Xs, ys = zip(*[dask.delayed(clone_and_shift, nout=2)(X, y, i) for i in range(10)])\n",
    "Xs = [da.from_delayed(x, shape=X.shape, dtype=X.dtype) for x in Xs]\n",
    "ys = [da.from_delayed(y_, shape=y.shape, dtype=y.dtype) for y_ in ys]\n",
    "X2 = da.concatenate(Xs)\n",
    "y2 = da.concatenate(ys)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's plot a sample of points, coloring by which partition the data came from."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:29.589732Z",
     "iopub.status.busy": "2022-06-06T20:41:29.589273Z",
     "iopub.status.idle": "2022-06-06T20:41:29.861293Z",
     "shell.execute_reply": "2022-06-06T20:41:29.860779Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.scatter(X2[::5, 0], y2[::5], c=np.arange(0, len(X2), 5) // 100, cmap=\"Set1\",\n",
    "           label=\"Partition\")\n",
    "ax.set(xlabel=\"Feature 0\", ylabel=\"target\", title=\"Non-stationary data (by partition)\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's fit two estimators:\n",
    "\n",
    "1. One `BlockwiseVotingRegressor` on the entire dataset (which fits a `LinearRegression` on each partition)\n",
    "2. One `LinearRegression` on a sample from the entire dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:29.866566Z",
     "iopub.status.busy": "2022-06-06T20:41:29.866066Z",
     "iopub.status.idle": "2022-06-06T20:41:29.996203Z",
     "shell.execute_reply": "2022-06-06T20:41:29.995452Z"
    }
   },
   "outputs": [],
   "source": [
    "subestimator = sklearn.linear_model.LinearRegression()\n",
    "clf = dask_ml.ensemble.BlockwiseVotingRegressor(\n",
    "    subestimator,\n",
    ")\n",
    "clf.fit(X2, y2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:29.999578Z",
     "iopub.status.busy": "2022-06-06T20:41:29.999383Z",
     "iopub.status.idle": "2022-06-06T20:41:30.084724Z",
     "shell.execute_reply": "2022-06-06T20:41:30.083995Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_sampled, y_sampled = dask.compute(X2[::10], y2[::10])\n",
    "\n",
    "subestimator.fit(X_sampled, y_sampled)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Comparing the scores, we find that the sampled dataset performs much better, despite training on less data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:30.088529Z",
     "iopub.status.busy": "2022-06-06T20:41:30.088175Z",
     "iopub.status.idle": "2022-06-06T20:41:30.361696Z",
     "shell.execute_reply": "2022-06-06T20:41:30.361043Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-11.612132010152138"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(X2, y2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-06T20:41:30.365291Z",
     "iopub.status.busy": "2022-06-06T20:41:30.364984Z",
     "iopub.status.idle": "2022-06-06T20:41:30.485430Z",
     "shell.execute_reply": "2022-06-06T20:41:30.484821Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.11854626480221908"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subestimator.score(X2, y2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This shows that ensuring your needs to be relatively uniform across partitions. Even including the standard controls to normalize whatever underlying force is generating the non-stationary data (e.g. a time trend compontent or differencing timeseries data, dummy variables for geographic regions, etc) is not sufficient when your dataset is partioned by the non-uniform variable. You would still need to either shuffle your data prior to fitting, or just sample and fit the sub-estimator on the sub-sample that fits in memory."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}

{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Blockwise Ensemble Methods\n",
    "\n",
    "Dask-ML provides some [ensemble methods](https://ml.dask.org/modules/api.html#module-dask_ml.ensemble) that are tailored to `dask.array`'s and `dask.dataframe`'s blocked structure. The basic idea is to fit a copy of some sub-estimator to each block (or partition) of the dask Array or DataFrame. Becuase each block fits in memory, the sub-estimator only needs to handle in-memory data structures like a NumPy array or pandas DataFrame. It also will be relatively fast, since each block fits in memory and we won't need to move large amounts of data between workers on a cluster. We end up with an ensemble of models: one per block in the training dataset.\n",
    "\n",
    "At prediction time, we combine the results from all the models in the ensemble. For regression problems, this means averaging the predictions from each sub-estimator. For classification problems, each sub-estimator votes and the results are combined. See https://scikit-learn.org/stable/modules/ensemble.html#voting-classifier for details on how they can be combeind. See https://scikit-learn.org/stable/modules/ensemble.html for a general overview of why averaging ensemble methods can be useful.\n",
    "\n",
    "It's crucially important that the distribution of values in your dataset be relatively uniform across partitions. Otherwise the parameters learned on any given partition of the data will be poor for the dataset as a whole. This will be shown in detail later."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's randomly generate an example dataset. In practice, you would load the data from storage. We'll create a `dask.array` with 10 blocks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:02.816185Z",
     "iopub.status.busy": "2022-06-16T17:50:02.815957Z",
     "iopub.status.idle": "2022-06-16T17:50:06.500975Z",
     "shell.execute_reply": "2022-06-16T17:50:06.500334Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/share/miniconda3/envs/dask-examples/lib/python3.9/site-packages/dask/base.py:1283: UserWarning: Running on a single-machine scheduler when a distributed client is active might lead to unexpected results.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <td>\n",
       "            <table>\n",
       "                <thead>\n",
       "                    <tr>\n",
       "                        <td> </td>\n",
       "                        <th> Array </th>\n",
       "                        <th> Chunk </th>\n",
       "                    </tr>\n",
       "                </thead>\n",
       "                <tbody>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Bytes </th>\n",
       "                        <td> 152.59 MiB </td>\n",
       "                        <td> 15.26 MiB </td>\n",
       "                    </tr>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Shape </th>\n",
       "                        <td> (1000000, 20) </td>\n",
       "                        <td> (100000, 20) </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Count </th>\n",
       "                        <td> 10 Tasks </td>\n",
       "                        <td> 10 Chunks </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                    <th> Type </th>\n",
       "                    <td> float64 </td>\n",
       "                    <td> numpy.ndarray </td>\n",
       "                    </tr>\n",
       "                </tbody>\n",
       "            </table>\n",
       "        </td>\n",
       "        <td>\n",
       "        <svg width=\"75\" height=\"170\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"25\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"24\" x2=\"25\" y2=\"24\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"25\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"48\" x2=\"25\" y2=\"48\" />\n",
       "  <line x1=\"0\" y1=\"60\" x2=\"25\" y2=\"60\" />\n",
       "  <line x1=\"0\" y1=\"72\" x2=\"25\" y2=\"72\" />\n",
       "  <line x1=\"0\" y1=\"84\" x2=\"25\" y2=\"84\" />\n",
       "  <line x1=\"0\" y1=\"96\" x2=\"25\" y2=\"96\" />\n",
       "  <line x1=\"0\" y1=\"108\" x2=\"25\" y2=\"108\" />\n",
       "  <line x1=\"0\" y1=\"120\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"25\" y1=\"0\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.0,0.0 25.412616514582485,0.0 25.412616514582485,120.0 0.0,120.0\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"12.706308\" y=\"140.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >20</text>\n",
       "  <text x=\"45.412617\" y=\"60.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,45.412617,60.000000)\">1000000</text>\n",
       "</svg>\n",
       "        </td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<normal, shape=(1000000, 20), dtype=float64, chunksize=(100000, 20), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from distributed import Client\n",
    "import dask_ml.datasets\n",
    "import dask_ml.ensemble\n",
    "\n",
    "client = Client(n_workers=4, threads_per_worker=1)\n",
    "\n",
    "X, y = dask_ml.datasets.make_classification(n_samples=1_000_000,\n",
    "                                            n_informative=10,\n",
    "                                            shift=2, scale=2,\n",
    "                                            chunks=100_000)\n",
    "X"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Classification\n",
    "\n",
    "The `sub-estimator` should be an instantiated scikit-learn-API compatible estimator (anything that implements the `fit` / `predict` API, including pipelines). It only needs to handle in-memory datasets. We'll use `sklearn.linear_model.RidgeClassifier`.\n",
    "\n",
    "To get the output shapes right, we require that you provide the `classes` for classification problems, either when creating the estimator or in `.fit` if the sub-estimator also requires the classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:06.504146Z",
     "iopub.status.busy": "2022-06-16T17:50:06.503778Z",
     "iopub.status.idle": "2022-06-16T17:50:06.510334Z",
     "shell.execute_reply": "2022-06-16T17:50:06.509821Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "BlockwiseVotingClassifier(classes=[0, 1],\n",
       "                          estimator=RidgeClassifier(random_state=0))"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import sklearn.linear_model\n",
    "\n",
    "subestimator = sklearn.linear_model.RidgeClassifier(random_state=0)\n",
    "clf = dask_ml.ensemble.BlockwiseVotingClassifier(\n",
    "    subestimator,\n",
    "    classes=[0, 1]\n",
    ")\n",
    "clf"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can train normally. This will *independently* fit a clone of `subestimator` on each partition of `X` and `y`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:06.512915Z",
     "iopub.status.busy": "2022-06-16T17:50:06.512585Z",
     "iopub.status.idle": "2022-06-16T17:50:09.904278Z",
     "shell.execute_reply": "2022-06-16T17:50:09.903812Z"
    }
   },
   "outputs": [],
   "source": [
    "clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All of the fitted estimators are available at `.estimators_`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:09.910103Z",
     "iopub.status.busy": "2022-06-16T17:50:09.909522Z",
     "iopub.status.idle": "2022-06-16T17:50:09.915876Z",
     "shell.execute_reply": "2022-06-16T17:50:09.915490Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0),\n",
       " RidgeClassifier(random_state=0)]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.estimators_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "These are different estimators! They've been trained on separate batches of data and have learned different parameters. We can plot the difference in the learned `coef_` of the first two models to visualize this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:09.922393Z",
     "iopub.status.busy": "2022-06-16T17:50:09.921896Z",
     "iopub.status.idle": "2022-06-16T17:50:10.486054Z",
     "shell.execute_reply": "2022-06-16T17:50:10.485009Z"
    }
   },
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:10.489334Z",
     "iopub.status.busy": "2022-06-16T17:50:10.488910Z",
     "iopub.status.idle": "2022-06-16T17:50:10.621607Z",
     "shell.execute_reply": "2022-06-16T17:50:10.621010Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYkAAAEJCAYAAABhbdtlAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8qNh9FAAAACXBIWXMAAAsTAAALEwEAmpwYAAAW10lEQVR4nO3df7BkZZ3f8feHAcRf6+gyyDAwDOJoCZo1OgKaWMEfKODiUFFSWLsBWZVgiVuV8gdjiLubjcZxXVdlpZwQg6JuhbDZVUcZMyIuVpBCgbiggxJHHGBkhIFFFFHZkW/+OGfW5tJP3763e34wvF9VXfec8zzPOc853bc/fX50n1QVkiQNs9eu7oAkafdlSEiSmgwJSVKTISFJajIkJElNhoQkqcmQeBRLsibJuwfG35zkjiT3JfntJP8iyff78ZN3YVfnLcmGJMfu6n7sLEmuSPLGXbDcJPlEknuSfLOfNvP1dF+Sp80yn6V9vQU7p+eaTfyexJ4pySbgqcA24NfAjcCngAuq6sEh9fcBfgocU1XX99MuB9ZW1Ud2Vr93J0kKWF5VG3d1X8aV5ArgM1X18Ub5M4D3Ai8B9gFuAT4JfKSqfj3Bcl8M/A/gmVX182Gvp51ttm2h8bgnsWc7qaqeCBwKrAbOAf57o+5Tgf2ADQPTDp0xPrYke8+n3aNJ/+l7p/0PJjkc+AZwG/CcqnoScAqwAnjihLM/FNhUVT/vx4e9nvRIVFU+9sAHsAl4+YxpRwEPAs/uxz8JvAd4BvBzoID7gK8CP+jr/qKf9hjgSXQhswX4Ud92QT+v1wNfBz4E/ENf9hjgz4FbgTuANcBj+/rHApuBtwF39vM8Y6CvjwU+SPdJ917gyoG2xwBXAT8BrgeOHWc7AH8CXEK3R/UzujewFSPaFvD0IdNHrdeTgS8CW4F7+uGDB9peQfdJ/uv9tn16v5yzgO/3bc6n38vv2/wB8N2+bD1w6EDZccD3+m30UeBrwBsb6/MZ4NJZXjev7rfLT/q+Pmug7CDgb/p1+yHwh/30NwC/pNtjvY9uj+Ihr6eZ27P1/ALL+np79/Vme81d2T8X9/R9OqEve2/fn1/2ffgoELrX5539Mm+g/1/wMeI1sas74GMHPbFDQqKffivw5n74k8B7+uGH/HMOmwfwOeC/Ao8HDgC+Cfy7vuz1dIe23grs3f/DfxhYCzyF7pPqF4D39fWP7ev/Kd1hjxOB+4En9+Xn929SS4AFwIvo3pyXAHf39feie5O8G1g023agC4lf9m0XAO8Drh6xDVshMWq9fht4DfC4vuyvgc8NtL2ifw6O7LfTPv1yvggsBJbSvQkf39c/GdgIPKuv/x+Bq/qy/ekO6by2n8+/77dpKyR+zEAQDynf/mHhuH5+7+yXvW+/ra8D/qgffxpwM/DKgef/yoF5LePhr6fBkGg9vw9px+yvuX8E3tTP483A7fzmMPoVg9sCeGW/DgvpAuNZwOJd/b+6uz92eQd87KAnth0SVwPn9sOfZMyQoDt88Cv6T8z9tNcBf9cPvx64daAs/RvO4QPTXgj8sB8+lu6T9ODy7qTbS9irL/udIf0/B/j0jGnrgdNn2w50IfGVgbIjgF+M2IYPC4nZ1mvIPJ4L3DMwfgXwp0OW8y8Hxi8BVvXDXwLeMFC2F12YHgqcxkDI9X3bTDsk/pE+fBrl7wYumbGsH/XP1dGDz29f/i7gEwPP/1ghMcvz+0/txnzNbRwoe1zf9sCBbT0YEi8F/t/219iO/h/cUx4eN370WUJ3OGiuDqX7dLklyfZpe9Ed395ucHgR3T/tdQP1Q/eJb7u7q2rbwPj9wBPoPiHvR3fIa1g/Tkly0sC0fYC/G3M9fjxjefsl2XtGP0YZuV5JHkd3SON4ukNPAE9MsqB+c2J4cDu1+vWEfvhQ4CNJPjhQHrrn8aDBeVVVJRk27+3uBhaPKD+I7vDP9vk92M9vCV3AHJTkJwP1FwD/Z8T8WkY9v4PGec3903arqvv7ek9giKr6apKP0u3FLE3yWeDtVfXTeazDo4Yh8SiS5AV0//BXzqP5bXSf6vYf8YZaA8N30X1aPLKqfjTHZd1Fd1jocLpzDjP78emqetMc5zkts63X24BnAkdX1Y+TPBf4Ft0b+3Y1pF3LbcB7q+qvZhYkWQ4cMjCewfEhvkJ3KOwTjfLbgecMmd+P6J77H1bV8jn0vWXU8ztonNfcKA/bzlV1HnBekgPo9tjeQbcHpQavbnoUSPJbSX4XuJjuksBvz3UeVbUF+DLwwX5+eyU5PMm/atR/EPhvwIf6f0iSLEnyyjGW9SBwIfAXSQ5KsiDJC5M8hu7k60lJXtlP3y/JsUkOnus6jWnffhn7JdmP7s1+1Ho9kS5EfpLkKcAfT7j8NcC7khzZL+tJSU7pyy4Fjkzyr/uryf4QOHDEvP4YeFGSDyQ5sJ/f05N8JslCujfNVyV5WX8J69vo3qSvojsX8NMk5yR5bL/tn91/8JiTWZ7fwXpzes0NcQfduRP6dX1BkqP7dfs5vznZrhEMiT3bF5L8jO4T2bnAXwBnTDC/0+hOWt5IdzXJ/2L04Ytz6E58Xp3kp3SfZJ855rLeDnwbuIbu8Nj76Y4j3wasBP4D3Qne2+g+De6o1/IGujf97Y8zGL1eH6Y7aX8X3fmf/z3Jwqvqs3TrfnG/rO8AJ/Rld9Fdwrqa7lDScrqrplrz+gHd+ZNlwIYk99JdrXQt8LOqugn4feAv+/6fRHcZ9QP9obKT6M6x/LAv/zjd1UfzMfT5HVJvrq+5QR8BXtt/we884LfoAv4eusNqd9NdGaUR/DKdJKnJPQlJUpMhIUlqMiQkSU2GhCSpyZCQJDXtUV+m23///WvZsmW7uhuS9Ihy3XXX3VVVi4aV7VEhsWzZMq699tpd3Q1JekRJckurzMNNkqQmQ0KS1GRISJKaDAlJUpMhIUlqMiQkSU2GhCSpaSohkeT4JDcl2Zhk1ZDyJDmvL78hyfPGaZvkrX3ZhiR/No2+SpLGN/GX6ZIsoLtn7HF0N2G/JsnaqrpxoNoJdDdEWU53Q/WPAUePapvkJXQ3l/lnVfWr7XcBkzQ/y1ZdOqf6m1a/agf1RI8k09iTOArYWFU3V9UDdLfIXDmjzkrgU9W5GliYZPEsbd8MrK6qXwFU1Z1T6KskaQ6mERJL6G4hud3mfto4dUa1fQbw4iTfSPK1+dxLV5I0mWn8dlOGTJt5T9RWnVFt9waeDBwDvAC4JMnTasb9VpOcCZwJsHTp0jl0W5I0m2nsSWwGDhkYPxi4fcw6o9puBv62P0T1TeBBYP+ZC6+qC6pqRVWtWLRo6I8YSpLmaRohcQ2wPMlhSfYFTgXWzqizFjitv8rpGODeqtoyS9vPAS8FSPIMYF/grin0V5I0pokPN1XVtiRnA+uBBcCFVbUhyVl9+RpgHXAisBG4HzhjVNt+1hcCFyb5DvAAcPrMQ02SpB1rKveTqKp1dEEwOG3NwHABbxm3bT/9AeD3p9E/SZoPLxv2G9eSpBEMCUlSkyEhSWoyJCRJTYaEJKnJkJAkNRkSkqQmQ0KS1GRISJKaDAlJUpMhIUlqMiQkSU2GhCSpyZCQJDUZEpKkJkNCktRkSEiSmgwJSVKTISFJajIkJElNhoQkqcmQkCQ1GRKSpCZDQpLUZEhIkpoMCUlSkyEhSWqaSkgkOT7JTUk2Jlk1pDxJzuvLb0jyvDm0fXuSSrL/NPoqSRrfxCGRZAFwPnACcATwuiRHzKh2ArC8f5wJfGyctkkOAY4Dbp20n5Kkudt7CvM4CthYVTcDJLkYWAncOFBnJfCpqirg6iQLkywGls3S9kPAO4HPT6GfkuZp2apL59xm0+pX7YCeaGebxuGmJcBtA+Ob+2nj1Gm2TfJq4EdVdf2ohSc5M8m1Sa7dunXr/NZAkjTUNEIiQ6bVmHWGTk/yOOBc4I9mW3hVXVBVK6pqxaJFi2btrCRpfNMIic3AIQPjBwO3j1mnNf1w4DDg+iSb+un/N8mBU+ivJGlM0wiJa4DlSQ5Lsi9wKrB2Rp21wGn9VU7HAPdW1ZZW26r6dlUdUFXLqmoZXZg8r6p+PIX+SpLGNPGJ66raluRsYD2wALiwqjYkOasvXwOsA04ENgL3A2eMajtpnyRJ0zGNq5uoqnV0QTA4bc3AcAFvGbftkDrLJu+lJGmu/Ma1JKnJkJAkNRkSkqQmQ0KS1GRISJKaDAlJUpMhIUlqMiQkSU2GhCSpyZCQJDUZEpKkJkNCktRkSEiSmgwJSVKTISFJajIkJElNhoQkqcmQkCQ1TeX2pZrMslWXzrnNptWv2gE9kaSHck9CktRkSEiSmgwJSVKTISFJajIkJElNhoQkqcmQkCQ1TSUkkhyf5KYkG5OsGlKeJOf15Tcked5sbZN8IMn3+vqfTbJwGn2VJI1v4i/TJVkAnA8cB2wGrkmytqpuHKh2ArC8fxwNfAw4epa2lwHvqqptSd4PvAs4Z9L+Str55vqFUb8suvuYxp7EUcDGqrq5qh4ALgZWzqizEvhUda4GFiZZPKptVX25qrb17a8GDp5CXyVJczCNkFgC3DYwvrmfNk6dcdoC/AHwpYl7Kkmak2mERIZMqzHrzNo2ybnANuCvhi48OTPJtUmu3bp16xjdlSSNaxohsRk4ZGD8YOD2MeuMbJvkdOB3gd+rqpnBA0BVXVBVK6pqxaJFi+a9EpKkh5tGSFwDLE9yWJJ9gVOBtTPqrAVO669yOga4t6q2jGqb5Hi6E9Wvrqr7p9BPSdIcTXx1U3/10dnAemABcGFVbUhyVl++BlgHnAhsBO4HzhjVtp/1R4HHAJclAbi6qs6atL+SpPFN5X4SVbWOLggGp60ZGC7gLeO27ac/fRp9kyTNn9+4liQ1GRKSpCZDQpLUZEhIkpoMCUlSkyEhSWqayiWwkqSHmusv38Lu+eu37klIkprck5C0W/NeFLuWexKSpCb3JPSI5KdLaedwT0KS1GRISJKaDAlJUpMhIUlqMiQkSU2GhCSpyZCQJDX5PQlJe6w95feTdiX3JCRJTYaEJKnJkJAkNRkSkqQmQ0KS1GRISJKaDAlJUtNUQiLJ8UluSrIxyaoh5UlyXl9+Q5LnzdY2yVOSXJbk+/3fJ0+jr5Kk8U0cEkkWAOcDJwBHAK9LcsSMaicAy/vHmcDHxmi7Cri8qpYDl/fjkqSdaBp7EkcBG6vq5qp6ALgYWDmjzkrgU9W5GliYZPEsbVcCF/XDFwEnT6GvkqQ5mMbPciwBbhsY3wwcPUadJbO0fWpVbQGoqi1JDphCXzVF/uSBtOdLVU02g+QU4JVV9cZ+/N8CR1XVWwfqXAq8r6qu7McvB94JPK3VNslPqmrhwDzuqaqHnZdIcibdISyWLl36/FtuuWXe6zLJfZN35T2XH4393pXL3pltp7lsPbLszOc6yXVVtWJY2TQON20GDhkYPxi4fcw6o9re0R+Sov9757CFV9UFVbWiqlYsWrRo3ishSXq4aYTENcDyJIcl2Rc4FVg7o85a4LT+KqdjgHv7Q0mj2q4FTu+HTwc+P4W+SpLmYOJzElW1LcnZwHpgAXBhVW1IclZfvgZYB5wIbATuB84Y1baf9WrgkiRvAG4FTpm0r3sqDylI2lGmcj+JqlpHFwSD09YMDBfwlnHb9tPvBl42jf5JkubHb1xLkpq8M512GQ+TSbs/9yQkSU2GhCSpyZCQJDUZEpKkJkNCktRkSEiSmrwEVo9KXn4rjcc9CUlSkyEhSWoyJCRJTYaEJKnJkJAkNXl1kzRHXhmlRxP3JCRJTYaEJKnJkJAkNRkSkqQmQ0KS1GRISJKaDAlJUpMhIUlqMiQkSU2GhCSpyZCQJDUZEpKkpol+4C/JU4D/CSwDNgH/pqruGVLveOAjwALg41W1elT7JMcBq4F9gQeAd1TVVyfp647mj75J2hNNuiexCri8qpYDl/fjD5FkAXA+cAJwBPC6JEfM0v4u4KSqeg5wOvDpCfspSZqHSUNiJXBRP3wRcPKQOkcBG6vq5qp6ALi4b9dsX1Xfqqrb++kbgP2SPGbCvkqS5mjSkHhqVW0B6P8eMKTOEuC2gfHN/bRx278G+FZV/WpYB5KcmeTaJNdu3bp1nqshSRpm1nMSSb4CHDik6Nwxl5Eh02qshsmRwPuBV7TqVNUFwAUAK1asGGu+kqTxzBoSVfXyVlmSO5IsrqotSRYDdw6pthk4ZGD8YGD7oaRm+yQHA58FTquqH4yxLpKkKZv0cNNauhPL9H8/P6TONcDyJIcl2Rc4tW/XbJ9kIXAp8K6q+vqEfZQkzdOk97heDVyS5A3ArcApAEkOorvU9cSq2pbkbGA93SWwF1bVhlHtgbOBpwPvTvLuftorqmrYnook7XF2l8vqJwqJqrobeNmQ6bcDJw6MrwPWzaH9e4D3TNI3SdLkJt2T2KPsLsktSbsLf5ZDktRkSEiSmgwJSVKTISFJajIkJElNhoQkqcmQkCQ1GRKSpCZDQpLUZEhIkpoMCUlSkyEhSWoyJCRJTYaEJKnJkJAkNRkSkqQmQ0KS1GRISJKaDAlJUpMhIUlqMiQkSU2GhCSpyZCQJDUZEpKkJkNCktQ0UUgkeUqSy5J8v//75Ea945PclGRjklXjtk+yNMl9Sd4+ST8lSfMz6Z7EKuDyqloOXN6PP0SSBcD5wAnAEcDrkhwxZvsPAV+asI+SpHmaNCRWAhf1wxcBJw+pcxSwsapurqoHgIv7diPbJzkZuBnYMGEfJUnztPeE7Z9aVVsAqmpLkgOG1FkC3DYwvhk4elT7JI8HzgGOAzzUpD3GptWv2tVdkOZk1pBI8hXgwCFF5465jAyZVrO0+U/Ah6rqvmRY84GZJ2cCZwIsXbp0zC5JksYxa0hU1ctbZUnuSLK43wtYDNw5pNpm4JCB8YOB2/vhVvujgdcm+TNgIfBgkl9W1UeH9O8C4AKAFStWzBY+kqQ5mPScxFrg9H74dODzQ+pcAyxPcliSfYFT+3bN9lX14qpaVlXLgA8D/2VYQEiSdqxJQ2I1cFyS79OdP1gNkOSgJOsAqmobcDawHvgucElVbRjVXpK0e5joxHVV3Q28bMj024ETB8bXAevGbT+jzp9M0kdJ0vz5jWtJUpMhIUlqMiQkSU2GhCSpyZCQJDUZEpKkJkNCktQ06Q/86RHOH5yTNIp7EpKkJkNCktRkSEiSmgwJSVKTJ66lRxAvNNDO5p6EJKnJkJAkNRkSkqQmQ0KS1GRISJKaDAlJUpMhIUlqMiQkSU2GhCSpKVW1q/swNUm2Arfs6n5I0iPMoVW1aFjBHhUSkqTp8nCTJKnJkJAkNRkSkqQmQ0KS1GRISJKaDAlJUpMhIc0iya+T/P3AY9k85nFykiN2QPekHcrbl0qz+0VVPXfCeZwMfBG4cdwGSfauqm0TLleaiHsS0jwkeX6SryW5Lsn6JIv76W9Kck2S65P8TZLHJXkR8GrgA/2eyOFJrkiyom+zf5JN/fDrk/x1ki8AX07y+CQX9vP8VpKVu2qd9ehkSEize+zAoabPJtkH+EvgtVX1fOBC4L193b+tqhdU1e8A3wXeUFVXAWuBd1TVc6vqB7Ms74XA6VX1UuBc4KtV9QLgJXRB8/gdsI7SUB5ukmb3kMNNSZ4NPBu4LAnAAmBLX/zsJO8BFgJPANbPY3mXVdU/9MOvAF6d5O39+H7AUroAknY4Q0KauwAbquqFQ8o+CZxcVdcneT1wbGMe2/jNnvx+M8p+PmNZr6mqm+bdW2kCHm6S5u4mYFGSFwIk2SfJkX3ZE4Et/SGp3xto87O+bLtNwPP74deOWNZ64K3pd1mS/PPJuy+Nz5CQ5qiqHqB7Y39/kuuBvwde1Be/G/gGcBnwvYFmFwPv6E8+Hw78OfDmJFcB+49Y3H8G9gFuSPKdflzaafypcElSk3sSkqQmQ0KS1GRISJKaDAlJUpMhIUlqMiQkSU2GhCSpyZCQJDX9f4oVJeyKYGh4AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "a = clf.estimators_[0].coef_\n",
    "b = clf.estimators_[1].coef_\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.bar(np.arange(a.shape[1]), (a - b).ravel())\n",
    "ax.set(xticks=[], xlabel=\"Feature\", title=\"Difference in Learned Coefficients\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "That said, the assumption backing this entire process is that the distribution of the data is relatively uniform across partitions. The parameters learned by the each member of the ensemble should be relatively similar, and so will give relatively similar predictions when applied to the same data.\n",
    "\n",
    "When you `predict`, the result will have the same chunking pattern as the input array you're predicting for (which need not match the partitioning of the training data)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:10.624366Z",
     "iopub.status.busy": "2022-06-16T17:50:10.624187Z",
     "iopub.status.idle": "2022-06-16T17:50:10.642078Z",
     "shell.execute_reply": "2022-06-16T17:50:10.641566Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <td>\n",
       "            <table>\n",
       "                <thead>\n",
       "                    <tr>\n",
       "                        <td> </td>\n",
       "                        <th> Array </th>\n",
       "                        <th> Chunk </th>\n",
       "                    </tr>\n",
       "                </thead>\n",
       "                <tbody>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Bytes </th>\n",
       "                        <td> 7.63 MiB </td>\n",
       "                        <td> 781.25 kiB </td>\n",
       "                    </tr>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Shape </th>\n",
       "                        <td> (1000000,) </td>\n",
       "                        <td> (100000,) </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Count </th>\n",
       "                        <td> 31 Tasks </td>\n",
       "                        <td> 10 Chunks </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                    <th> Type </th>\n",
       "                    <td> int64 </td>\n",
       "                    <td> numpy.ndarray </td>\n",
       "                    </tr>\n",
       "                </tbody>\n",
       "            </table>\n",
       "        </td>\n",
       "        <td>\n",
       "        <svg width=\"170\" height=\"75\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"120\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"25\" x2=\"120\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"12\" y1=\"0\" x2=\"12\" y2=\"25\" />\n",
       "  <line x1=\"24\" y1=\"0\" x2=\"24\" y2=\"25\" />\n",
       "  <line x1=\"36\" y1=\"0\" x2=\"36\" y2=\"25\" />\n",
       "  <line x1=\"48\" y1=\"0\" x2=\"48\" y2=\"25\" />\n",
       "  <line x1=\"60\" y1=\"0\" x2=\"60\" y2=\"25\" />\n",
       "  <line x1=\"72\" y1=\"0\" x2=\"72\" y2=\"25\" />\n",
       "  <line x1=\"84\" y1=\"0\" x2=\"84\" y2=\"25\" />\n",
       "  <line x1=\"96\" y1=\"0\" x2=\"96\" y2=\"25\" />\n",
       "  <line x1=\"108\" y1=\"0\" x2=\"108\" y2=\"25\" />\n",
       "  <line x1=\"120\" y1=\"0\" x2=\"120\" y2=\"25\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.0,0.0 120.0,0.0 120.0,25.412616514582485 0.0,25.412616514582485\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"60.000000\" y=\"45.412617\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >1000000</text>\n",
       "  <text x=\"140.000000\" y=\"12.706308\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(0,140.000000,12.706308)\">1</text>\n",
       "</svg>\n",
       "        </td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<_vote_block, shape=(1000000,), dtype=int64, chunksize=(100000,), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds = clf.predict(X)\n",
    "preds"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This generates a set of tasks that\n",
    "\n",
    "1. Calls `subestimator.predict(chunk)` for each subestimator (10 in our case)\n",
    "2. Concatenates those predictions together\n",
    "3. Somehow averages the predictions to a single overall prediction\n",
    "\n",
    "We used the default `voting=\"hard\"` strategy, which means we just choose the class that had the higest number of votes. If the first two sub-estimators picked class `0` and the other eight picked class `1` for the first row, the final prediction for that row will be class `1`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:10.644772Z",
     "iopub.status.busy": "2022-06-16T17:50:10.644516Z",
     "iopub.status.idle": "2022-06-16T17:50:11.329987Z",
     "shell.execute_reply": "2022-06-16T17:50:11.328922Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 0, 1, 0, 1, 0, 0, 0, 1])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "preds[:10].compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With `voting=\"soft\"` we have access to `predict_proba`, as long as the subestimator has a `predict_proba` method. These subestimators should be well-calibrated for the predictions to be meaningful. See [probability calibration](https://scikit-learn.org/stable/modules/calibration.html#calibration) for more."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:11.333399Z",
     "iopub.status.busy": "2022-06-16T17:50:11.332946Z",
     "iopub.status.idle": "2022-06-16T17:50:14.704239Z",
     "shell.execute_reply": "2022-06-16T17:50:14.702989Z"
    }
   },
   "outputs": [],
   "source": [
    "subestimator = sklearn.linear_model.LogisticRegression(random_state=0)\n",
    "clf = dask_ml.ensemble.BlockwiseVotingClassifier(\n",
    "    subestimator,\n",
    "    classes=[0, 1],\n",
    "    voting=\"soft\"\n",
    ")\n",
    "clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:14.708066Z",
     "iopub.status.busy": "2022-06-16T17:50:14.707824Z",
     "iopub.status.idle": "2022-06-16T17:50:14.972949Z",
     "shell.execute_reply": "2022-06-16T17:50:14.972395Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.43272648e-01, 8.56727352e-01],\n",
       "       [6.19429526e-01, 3.80570474e-01],\n",
       "       [9.70930225e-01, 2.90697751e-02],\n",
       "       [1.80908028e-01, 8.19091972e-01],\n",
       "       [9.99278781e-01, 7.21219037e-04]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "proba = clf.predict_proba(X)\n",
    "proba[:5].compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The stages here are similar to the `voting=\"hard\"` case. Only now instead of taking the majority vote we average the probabilities predicted by each sub-estimator."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Regression\n",
    "\n",
    "Regression is quite similar. The primary difference is that there's no voting; predictions from estimators are always reduced by averaging."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:14.976022Z",
     "iopub.status.busy": "2022-06-16T17:50:14.975659Z",
     "iopub.status.idle": "2022-06-16T17:50:15.108792Z",
     "shell.execute_reply": "2022-06-16T17:50:15.108294Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table>\n",
       "    <tr>\n",
       "        <td>\n",
       "            <table>\n",
       "                <thead>\n",
       "                    <tr>\n",
       "                        <td> </td>\n",
       "                        <th> Array </th>\n",
       "                        <th> Chunk </th>\n",
       "                    </tr>\n",
       "                </thead>\n",
       "                <tbody>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Bytes </th>\n",
       "                        <td> 152.59 MiB </td>\n",
       "                        <td> 15.26 MiB </td>\n",
       "                    </tr>\n",
       "                    \n",
       "                    <tr>\n",
       "                        <th> Shape </th>\n",
       "                        <td> (1000000, 20) </td>\n",
       "                        <td> (100000, 20) </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                        <th> Count </th>\n",
       "                        <td> 10 Tasks </td>\n",
       "                        <td> 10 Chunks </td>\n",
       "                    </tr>\n",
       "                    <tr>\n",
       "                    <th> Type </th>\n",
       "                    <td> float64 </td>\n",
       "                    <td> numpy.ndarray </td>\n",
       "                    </tr>\n",
       "                </tbody>\n",
       "            </table>\n",
       "        </td>\n",
       "        <td>\n",
       "        <svg width=\"75\" height=\"170\" style=\"stroke:rgb(0,0,0);stroke-width:1\" >\n",
       "\n",
       "  <!-- Horizontal lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"25\" y2=\"0\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"0\" y1=\"12\" x2=\"25\" y2=\"12\" />\n",
       "  <line x1=\"0\" y1=\"24\" x2=\"25\" y2=\"24\" />\n",
       "  <line x1=\"0\" y1=\"36\" x2=\"25\" y2=\"36\" />\n",
       "  <line x1=\"0\" y1=\"48\" x2=\"25\" y2=\"48\" />\n",
       "  <line x1=\"0\" y1=\"60\" x2=\"25\" y2=\"60\" />\n",
       "  <line x1=\"0\" y1=\"72\" x2=\"25\" y2=\"72\" />\n",
       "  <line x1=\"0\" y1=\"84\" x2=\"25\" y2=\"84\" />\n",
       "  <line x1=\"0\" y1=\"96\" x2=\"25\" y2=\"96\" />\n",
       "  <line x1=\"0\" y1=\"108\" x2=\"25\" y2=\"108\" />\n",
       "  <line x1=\"0\" y1=\"120\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Vertical lines -->\n",
       "  <line x1=\"0\" y1=\"0\" x2=\"0\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "  <line x1=\"25\" y1=\"0\" x2=\"25\" y2=\"120\" style=\"stroke-width:2\" />\n",
       "\n",
       "  <!-- Colored Rectangle -->\n",
       "  <polygon points=\"0.0,0.0 25.412616514582485,0.0 25.412616514582485,120.0 0.0,120.0\" style=\"fill:#ECB172A0;stroke-width:0\"/>\n",
       "\n",
       "  <!-- Text -->\n",
       "  <text x=\"12.706308\" y=\"140.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" >20</text>\n",
       "  <text x=\"45.412617\" y=\"60.000000\" font-size=\"1.0rem\" font-weight=\"100\" text-anchor=\"middle\" transform=\"rotate(-90,45.412617,60.000000)\">1000000</text>\n",
       "</svg>\n",
       "        </td>\n",
       "    </tr>\n",
       "</table>"
      ],
      "text/plain": [
       "dask.array<normal, shape=(1000000, 20), dtype=float64, chunksize=(100000, 20), chunktype=numpy.ndarray>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X, y = dask_ml.datasets.make_regression(n_samples=1_000_000,\n",
    "                                        chunks=100_000,\n",
    "                                        n_features=20)\n",
    "X"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:15.111620Z",
     "iopub.status.busy": "2022-06-16T17:50:15.111220Z",
     "iopub.status.idle": "2022-06-16T17:50:16.734521Z",
     "shell.execute_reply": "2022-06-16T17:50:16.733819Z"
    }
   },
   "outputs": [],
   "source": [
    "subestimator = sklearn.linear_model.LinearRegression()\n",
    "clf = dask_ml.ensemble.BlockwiseVotingRegressor(\n",
    "    subestimator,\n",
    ")\n",
    "clf.fit(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:16.739079Z",
     "iopub.status.busy": "2022-06-16T17:50:16.737586Z",
     "iopub.status.idle": "2022-06-16T17:50:17.002872Z",
     "shell.execute_reply": "2022-06-16T17:50:17.002354Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-78.38622013, 233.43160229, 205.39560793, 588.95585016,\n",
       "        41.91996355])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.predict(X)[:5].compute()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As usual with Dask-ML, scoring is done in parallel (and distributed on a cluster if you're connected to one)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:17.005927Z",
     "iopub.status.busy": "2022-06-16T17:50:17.005625Z",
     "iopub.status.idle": "2022-06-16T17:50:18.560041Z",
     "shell.execute_reply": "2022-06-16T17:50:18.559510Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1.0"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## The dangers of non-uniformly distributed data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Finally, it must be re-emphasized that your data should be uniformly distributed across partitoins prior to using these ensemble methods. If it's not, then you're better off just sampling rows from each partition and fitting a single classifer to it. By \"uniform\" we don't mean \"from a uniform probabillity distribution\". Just that there shouldn't be a clear per-partition pattern to how the data is distributed.\n",
    "\n",
    "Let's demonstrate that with an example. We'll generate a dataset with a clear trend across partitions. This might represent some non-stationary time-series, though it can occur in other contexts as well (e.g. on data partitioned by geography, age, etc.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:18.564813Z",
     "iopub.status.busy": "2022-06-16T17:50:18.564643Z",
     "iopub.status.idle": "2022-06-16T17:50:18.567765Z",
     "shell.execute_reply": "2022-06-16T17:50:18.567222Z"
    }
   },
   "outputs": [],
   "source": [
    "import dask.array as da\n",
    "import dask.delayed\n",
    "import sklearn.datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:18.570527Z",
     "iopub.status.busy": "2022-06-16T17:50:18.570182Z",
     "iopub.status.idle": "2022-06-16T17:50:18.573552Z",
     "shell.execute_reply": "2022-06-16T17:50:18.573121Z"
    }
   },
   "outputs": [],
   "source": [
    "def clone_and_shift(X, y, i):\n",
    "    X = X.copy()\n",
    "    X += i + np.random.random(X.shape)\n",
    "    y += 25 * (i + np.random.random(y.shape))\n",
    "    return X, y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:18.576179Z",
     "iopub.status.busy": "2022-06-16T17:50:18.575902Z",
     "iopub.status.idle": "2022-06-16T17:50:18.591606Z",
     "shell.execute_reply": "2022-06-16T17:50:18.591104Z"
    }
   },
   "outputs": [],
   "source": [
    "# Make a base dataset that we'll clone and shift\n",
    "X, y = sklearn.datasets.make_regression(n_features=4, bias=2, random_state=0)\n",
    "\n",
    "# Clone and shift 10 times, gradually increasing X and y for each partition\n",
    "Xs, ys = zip(*[dask.delayed(clone_and_shift, nout=2)(X, y, i) for i in range(10)])\n",
    "Xs = [da.from_delayed(x, shape=X.shape, dtype=X.dtype) for x in Xs]\n",
    "ys = [da.from_delayed(y_, shape=y.shape, dtype=y.dtype) for y_ in ys]\n",
    "X2 = da.concatenate(Xs)\n",
    "y2 = da.concatenate(ys)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's plot a sample of points, coloring by which partition the data came from."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:18.594472Z",
     "iopub.status.busy": "2022-06-16T17:50:18.594074Z",
     "iopub.status.idle": "2022-06-16T17:50:18.824939Z",
     "shell.execute_reply": "2022-06-16T17:50:18.824434Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "ax.scatter(X2[::5, 0], y2[::5], c=np.arange(0, len(X2), 5) // 100, cmap=\"Set1\",\n",
    "           label=\"Partition\")\n",
    "ax.set(xlabel=\"Feature 0\", ylabel=\"target\", title=\"Non-stationary data (by partition)\");"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now let's fit two estimators:\n",
    "\n",
    "1. One `BlockwiseVotingRegressor` on the entire dataset (which fits a `LinearRegression` on each partition)\n",
    "2. One `LinearRegression` on a sample from the entire dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:18.827793Z",
     "iopub.status.busy": "2022-06-16T17:50:18.827367Z",
     "iopub.status.idle": "2022-06-16T17:50:18.938470Z",
     "shell.execute_reply": "2022-06-16T17:50:18.937183Z"
    }
   },
   "outputs": [],
   "source": [
    "subestimator = sklearn.linear_model.LinearRegression()\n",
    "clf = dask_ml.ensemble.BlockwiseVotingRegressor(\n",
    "    subestimator,\n",
    ")\n",
    "clf.fit(X2, y2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:18.942016Z",
     "iopub.status.busy": "2022-06-16T17:50:18.941821Z",
     "iopub.status.idle": "2022-06-16T17:50:19.031095Z",
     "shell.execute_reply": "2022-06-16T17:50:19.029350Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_sampled, y_sampled = dask.compute(X2[::10], y2[::10])\n",
    "\n",
    "subestimator.fit(X_sampled, y_sampled)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Comparing the scores, we find that the sampled dataset performs much better, despite training on less data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:19.034107Z",
     "iopub.status.busy": "2022-06-16T17:50:19.033782Z",
     "iopub.status.idle": "2022-06-16T17:50:19.273362Z",
     "shell.execute_reply": "2022-06-16T17:50:19.272792Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-11.226200830838723"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.score(X2, y2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-06-16T17:50:19.276332Z",
     "iopub.status.busy": "2022-06-16T17:50:19.275927Z",
     "iopub.status.idle": "2022-06-16T17:50:19.388265Z",
     "shell.execute_reply": "2022-06-16T17:50:19.387668Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.06806069007109017"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "subestimator.score(X2, y2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This shows that ensuring your needs to be relatively uniform across partitions. Even including the standard controls to normalize whatever underlying force is generating the non-stationary data (e.g. a time trend compontent or differencing timeseries data, dummy variables for geographic regions, etc) is not sufficient when your dataset is partioned by the non-uniform variable. You would still need to either shuffle your data prior to fitting, or just sample and fit the sub-estimator on the sub-sample that fits in memory."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
